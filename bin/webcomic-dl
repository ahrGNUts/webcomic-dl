#!/usr/bin/python
import webcomic_dl
from webcomic_dl.comics import *
from webcomic_dl import cli, Comic, util
import requests
import os.path
import os
import json
import sys
import traceback

def getComicClass(comic):
    """Return the class appropriate for a given comic name or URL"""
    for c in Comic.__subclasses__():
        if(c.match(comic)):
            print("using {0} downloader".format(c.__name__))
            return c
    return None

def getMetafile(directory):
    return os.path.join(directory, "info.json")

def getTmpMetafile(directory):
    return os.path.join(directory, ".info.json.tmp")

def getMeta(directory):
    """Return a dict containing the metadata for this comic"""
    metaFile=getMetafile(directory)
    if(os.path.isfile(metaFile)):
        with open(metaFile, "r") as f:
            return json.loads(f.read())
    return {}

def saveMeta(directory:str, meta:str, pretty:bool=False):
    """Save the metadata dict atomically"""
    metaFile=getMetafile(directory)
    tmpfile=getTmpMetafile(directory)
    with open(tmpfile, "w") as f:
        if(pretty):
            string=util.prettyprint(meta)
        else:
            string=json.dumps(meta)
        f.write(string)
    if(os.path.isfile(tmpfile)):
        os.rename(tmpfile, metaFile)

def getMetaItem(meta, n):
    key="{0}".format(n).zfill(6)
    if(not key in meta):
        return None
    return meta[key]

def addMetaItem(meta, n, item):
    meta["{0}".format(n).zfill(6)]=item

def main():
    args=cli.getArgs()
    cls=getComicClass(args.comic)
    if(cls is None):
        sys.exit(1)

    if(args.fromURL):
        comic=cls(args.comic)
    else:
        comic=cls(cls.first)

    if(args.directory):
        comic.setDir(args.directory)

    meta=getMeta(comic.directory)

    while comic:
        n=comic.number
        if(not args.resume or getMetaItem(meta, n) is None):
            comic.load()
            if(args.verbose):
                print(util.prettyprint(comic.toDict()))
            comic.download(args.directory, args.overwrite)
            addMetaItem(meta, n, comic.toDict())
            saveMeta(comic.directory, meta, args.pretty)
        nextMeta=getMetaItem(meta, n+1)
        if(nextMeta != False):
            nextURL=None if nextMeta is None else nextMeta["url"]
            comic=comic.getNextComic(nextURL)
            for num in range(n+1, comic.number):
                addMetaItem(meta, num, False)
        else:
            comic=comic.getNextComic(blank=True)
    print("Done!")

try:
    main()
except KeyboardInterrupt:
    print("\rExiting due to keyboard interrupt")
except Exception:
    traceback.print_exc(file=sys.stderr)
